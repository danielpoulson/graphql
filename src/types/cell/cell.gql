type Cell {
  _id: ID!
  machNo: Int
  downtime: Int
  runtime: Int
  downpc: Int
  units: Int
  avail: Int
  perf: Int
  oee: Int
  monthlyOEE: Int
  idle: Int
  unitsmin: Int
  downnone: Int
  date: String
}

input NewCellInput {
  machNo: Int
  downtime: Int
  runtime: Int
  downpc: Int
  units: Int
  avail: Int
  perf: Int
  oee: Int
  monthlyOEE: Int
  idle: Int
  unitsmin: Int
  downnone: Int
  date: String
}

input UpdateCellInput {
  machNo: Int
  downtime: Int
  runtime: Int
  downpc: Int
  units: Int
  avail: Int
  perf: Int
  oee: Int
  monthlyOEE: Int
  idle: Int
  unitsmin: Int
  downnone: Int
  date: String
}

extend type Query {
  cell: Cell
  cells: [Cell]!
}

extend type Mutation {
  newCell(input: NewCellInput!): Cell!
  updateCell(id: ID!, input: UpdateCellInput!): Cell!
  removeCell(id: ID!): Cell!
}
