type Cell {
  machno: Int
  downtime: String
  runtime: String
  downpc: Float
  units: Int
  avail: Float
  perf: Float
  oee: Float
  monthlyOEE: Float
  idle: Int
  unitsmin: Float
  downnone: Float
  date: String
  shiftseq: String
}

type Pareto {
  labels: [String]
  pareto: [String]
  values: [String]
}

type Trend {
  line: String
  oeedata: [Float]
}

type LineSummary {
  day: Cell
  downPareto: Pareto
  month: Cell
  oeeTrend: Trend
}

input NewCellInput {
  machno: Int
  downtime: String
  runtime: String
  downpc: Float
  units: Int
  avail: Int
  perf: Int
  oee: Int
  monthlyOEE: Int
  idle: Int
  unitsmin: Int
  downnone: Int
  date: String
}

input UpdateCellInput {
  machno: Int
  downtime: String
  runtime: String
  downpc: Int
  units: Int
  avail: Int
  perf: Int
  oee: Int
  monthlyOEE: Int
  idle: Int
  unitsmin: Int
  downnone: Int
  date: String
}

type Query {
  getCell(id: Int): LineSummary
  getCells: [Cell]
}

type Mutation {
  newCell(input: NewCellInput!): Cell!
  updateCell(id: ID!, input: UpdateCellInput!): Cell!
  removeCell(id: ID!): Cell!
}
